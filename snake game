#include <iostream>
#include <chrono>
#include <cstdlib>
#include <conio.h>
#include <windows.h>
#include <limits>

using namespace std;


struct SnakeNode {
    pair<int, int> position;
    SnakeNode* next;
    SnakeNode(int x, int y) : position(x, y), next(nullptr) {}
};

class SnakeGame {
private:
    int width, height;
    SnakeNode* snakeHead;
    pair<int, int> direction;
    pair<int, int> fruit;
    bool running;
    int fruit_count;
    int score;
    chrono::steady_clock::time_point lastTime;
    int frameDelay;
    HANDLE hConsole;
    CHAR_INFO *screenBuffer;
    COORD bufferSize;
    SMALL_RECT screenRect;

   
    static int highScore;

    void initScreenBuffer() {
        hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
        bufferSize = { (short)width, (short)height };
        screenRect = { 0, 0, (short)(width - 1), (short)(height - 1) };
        screenBuffer = new CHAR_INFO[width * height];
    }

    void clearScreen() {
        COORD topLeft = { 0, 0 };
        DWORD written;
        FillConsoleOutputCharacter(hConsole, ' ', width * height, topLeft, &written);
        FillConsoleOutputAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_INTENSITY, width * height, topLeft, &written);
        SetConsoleCursorPosition(hConsole, topLeft);
    }

    void updateScreenBuffer() {
        for (int i = 0; i < width * height; i++) {
            screenBuffer[i].Char.AsciiChar = ' ';
            screenBuffer[i].Attributes = FOREGROUND_GREEN | FOREGROUND_INTENSITY;
        }

        for (int x = 0; x < width; x++) {
            screenBuffer[x].Char.AsciiChar = '#';
            screenBuffer[x + (height - 1) * width].Char.AsciiChar = '#';
        }
        for (int y = 0; y < height; y++) {
            screenBuffer[y * width].Char.AsciiChar = '#';
            screenBuffer[y * width + width - 1].Char.AsciiChar = '#';
        }

        SnakeNode* current = snakeHead;
        while (current != nullptr) {
            int index = current->position.second * width + current->position.first;
            screenBuffer[index].Char.AsciiChar = (current->next == nullptr ? '@' : 'o'); // Make the head '@'
            current = current->next;
        }

        int fruitIndex = fruit.second * width + fruit.first;
        screenBuffer[fruitIndex].Char.AsciiChar = '*';

       
        string scoreText = "Score: " + to_string(score);
        for (size_t i = 0; i < scoreText.size(); i++) {
            screenBuffer[i + 2].Char.AsciiChar = scoreText[i];  // Score starts from position 2
        }

        string highScoreText = "High Score: " + to_string(highScore);
        for (size_t i = 0; i < highScoreText.size(); i++) {
            screenBuffer[i + width - highScoreText.size() - 2].Char.AsciiChar = highScoreText[i];  // Display high score
        }

        WriteConsoleOutput(hConsole, screenBuffer, bufferSize, { 0, 0 }, &screenRect);
    }

    void spawnFruit() {
        srand(time(0));
        while (true) {
            fruit = { rand() % (width - 2) + 1, rand() % (height - 2) + 1 };
            bool occupied = false;
            SnakeNode* current = snakeHead;
            while (current != nullptr) {
                if (current->position == fruit) {
                    occupied = true;
                    break;
                }
                current = current->next;
            }
            if (!occupied) break;
        }
    }

    void moveSnake() {
        int headX = snakeHead->position.first;
        int headY = snakeHead->position.second;
        int newX = headX + direction.first;
        int newY = headY + direction.second;

        if (newX <= 0 || newX >= width - 1 || newY <= 0 || newY >= height - 1) {
            running = false;
            return;
        }

        SnakeNode* current = snakeHead->next;
        while (current != nullptr) {
            if (current->position.first == newX && current->position.second == newY) {
                running = false;
                return;
            }
            current = current->next;
        }

        
        SnakeNode* newHead = new SnakeNode(newX, newY);
        newHead->next = snakeHead;
        snakeHead = newHead;

        if (newHead->position == fruit) {
            score += 10;  // Increase score when fruit is eaten
            fruit_count++;
            if (fruit_count >= 7) {
                running = false;
                return;
            }
            spawnFruit();
           
            if (frameDelay > 50) {
                frameDelay -= 10;  // Decrease delay (faster game)
            }
        } else {
            // Remove the tail node (last part of the snake)
            SnakeNode* tail = snakeHead;
            while (tail->next != nullptr && tail->next->next != nullptr) {
                tail = tail->next;
            }
            delete tail->next;
            tail->next = nullptr;
        }
    }

    void changeDirection(char key) {
        switch (key) {
            case 'a': case 'A': if (direction != make_pair(1, 0)) direction = { -1, 0 }; break;
            case 'd': case 'D': if (direction != make_pair(-1, 0)) direction = { 1, 0 }; break;
            case 'w': case 'W': if (direction != make_pair(0, 1)) direction = { 0, -1 }; break;
            case 's': case 'S': if (direction != make_pair(0, -1)) direction = { 0, 1 }; break;
            case 'p': case 'P': running = !running; break;  // Pause  and resume the game
        }
    }

public:
    SnakeGame(int w = 25, int h = 25) : width(w), height(h), running(true), fruit_count(0), score(0), frameDelay(300) {
        snakeHead = new SnakeNode(w / 2, h / 2);
        direction = { 1, 0 };
        spawnFruit();
        lastTime = chrono::steady_clock::now();
        initScreenBuffer();
    }

    ~SnakeGame() {
        // Cleanup snake linked list
        SnakeNode* current = snakeHead;
        while (current != nullptr) {
            SnakeNode* temp = current;
            current = current->next;
            delete temp;
        }
        delete[] screenBuffer;
    }

    void countdown() {
        for (int i = 3; i > 0; --i) {
            cout << "\rGame starts in " << i << " seconds..." << flush;
            Sleep(1000);
        }
        cout << "\r                          \r"; // Clear countdown text
    }

    void run() {
        clearScreen();
        countdown();

        while (running) {
            auto currentTime = chrono::steady_clock::now();
            chrono::duration<int, std::milli> elapsedTime = chrono::duration_cast<chrono::milliseconds>(currentTime - lastTime);

            if (elapsedTime.count() >= frameDelay) {
                if (_kbhit()) {
                    char key = _getch();
                    changeDirection(key);
                }

                moveSnake();
                updateScreenBuffer();
                lastTime = chrono::steady_clock::now();
            }
        }

        // Update the high score if needed
        if (score > highScore) {
            highScore = score;
        }

        Sleep(500);
        cout << "\n" << (fruit_count >= 15 ? "You Win!" : "Game Over!") << endl;
    }

    
    static int getHighScore() {
        return highScore;
    }
};


int SnakeGame::highScore = 0;

int main() {
    char choice;

    while (true) {
        SnakeGame game;
        game.run();

       
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        cout << "Do you want to play again? (y/n): ";
        while (true) {
            cin >> choice;
            choice = tolower(choice);

            if (choice == 'y') {
                system("cls"); 
                break;
            } else if (choice == 'n') {
                cout << "Thanks for playing!" << endl;
                return 0;
            } else {
                cout << "Invalid input. Enter 'y' for yes or 'n' for no: ";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n'); 
            }
        }
    }
}
